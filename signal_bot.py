# signal_bot.py
# -*- coding: utf-8 -*-

import asyncio
import logging
import time
from datetime import datetime, timezone
import json
import socket

import pandas as pd
import yfinance as yf
from requests import RequestException

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher.filters import BoundFilter

# ==================== –ñ–Å–°–¢–ö–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò ====================

# –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ‚Äî –í–®–ò–¢–´. –ï—Å–ª–∏ –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Å–º–µ–Ω–∏—à—å ‚Äî –ø–æ–º–µ–Ω—è–π —Ç—É—Ç.
MAIN_BOT_TOKEN = "7930269505:AAEBq25Gc4XLksdelqmAMfZnyRdyD_KUzSs"
OWNER_ID = 6784470762
TARGET_CHAT_ID = 6784470762

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º
SYMBOL = "GC=F"     # Yahoo Gold Futures
TF = "1m"           # 1 –º–∏–Ω—É—Ç–∞

# –ü–∏–ø—Å—ã / —á–∞—Å—Ç–æ—Ç—ã
PIP = 1.0
POLL_SEC = 1.0          # —á–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞ (—Å–µ–∫)
HISTORY_BARS = 120

# –§–∏–ª—å—Ç—Ä—ã —Å–≤–µ—á–∏
MIN_RANGE_PIPS = 3.0
MIN_BODY_PIPS = 1.0

# TP/SL –∏ RR
TP_MIN_PIPS = 4.0
TP_CAP_PIPS = 30.0
RR_DEFAULT = 1.5

# –ê–Ω—Ç–∏-—Å–ø–∞–º
SIGNALS_PER_DAY_LIMIT = 50
COOLDOWN_BARS = 0      # 0=–±–µ–∑ –∫—É–ª–¥–∞—É–Ω–∞ –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏, –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å

# ===========================================================

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s",
    level=logging.INFO,
)

bot = Bot(token=MAIN_BOT_TOKEN)
dp = Dispatcher(bot)


class AllowedChat(BoundFilter):
    key = "allowed"

    def __init__(self, allowed: bool):
        self.allowed = allowed

    async def check(self, msg: types.Message) -> bool:
        if msg.chat and msg.chat.id == TARGET_CHAT_ID:
            return True
        if msg.from_user and msg.from_user.id == OWNER_ID:
            return True
        return False


dp.filters_factory.bind(AllowedChat)


class EngineState:
    def __init__(self):
        self.last_bar_ts = None       # datetime UTC –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏
        self.last_price = None
        self.signals_today = 0
        self.limit_per_day = SIGNALS_PER_DAY_LIMIT
        self.cooldown_bars = COOLDOWN_BARS
        self.cooldown_left = 0
        self.active_trade = None      # dict | None

    def reset_day_if_needed(self, new_bar_ts):
        if self.last_bar_ts and new_bar_ts.date() != self.last_bar_ts.date():
            self.signals_today = 0
            self.cooldown_left = 0


ES = EngineState()

# -------------------- –£—Ç–∏–ª–∏—Ç—ã --------------------

def pips(value: float) -> float:
    return abs(value) / PIP


def pips_to_price(pips_count: float) -> float:
    return pips_count * PIP


def fmt_price(x: float) -> str:
    return f"{x:,.2f}".replace(",", " ")


def load_m1_history(symbol: str, bars: int) -> pd.DataFrame:
    """
    –ù–∞–¥—ë–∂–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ 1m –∏—Å—Ç–æ—Ä–∏–∏ —Å retry –∏ fallback.
    """
    tries = 0
    max_tries = 5
    delay = 1.0
    while tries < max_tries:
        tries += 1
        try:
            df = yf.download(
                tickers=symbol,
                period="2d",
                interval="1m",
                progress=False,
                threads=False,
            )
            if isinstance(df, pd.DataFrame) and not df.empty:
                df = df.tail(bars + 3).copy()
                try:
                    df.index = df.index.tz_convert("UTC")
                except Exception:
                    df.index = df.index.tz_localize("UTC")
                return df

            logging.warning("yfinance empty DF, fallback to Ticker.history (try %d/%d)", tries, max_tries)
            t = yf.Ticker(symbol)
            df2 = t.history(period="2d", interval="1m", auto_adjust=False)
            if isinstance(df2, pd.DataFrame) and not df2.empty:
                df2 = df2.tail(bars + 3).copy()
                try:
                    df2.index = df2.index.tz_convert("UTC")
                except Exception:
                    df2.index = df2.index.tz_localize("UTC")
                return df2

            logging.warning("Fallback empty (try %d/%d). Sleep %.1fs", tries, max_tries, delay)
            time.sleep(delay)
            delay *= 1.8

        except (json.JSONDecodeError, RequestException, socket.timeout) as e:
            logging.warning("Network/JSON error: %s (try %d/%d). Sleep %.1fs", e, tries, max_tries, delay)
            time.sleep(delay)
            delay *= 1.8
        except Exception as e:
            logging.exception("load_m1_history unexpected (try %d/%d): %s", tries, max_tries, e)
            time.sleep(delay)
            delay *= 1.8

    raise RuntimeError("Empty history")


def last_closed_candle(df: pd.DataFrame):
    """
    –í–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ó–ê–ö–†–´–¢–£–Æ —Å–≤–µ—á—É (ts, o, h, l, c).
    –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç–æ–π ‚Äî –±–µ—Ä—ë–º –ø—Ä–µ–¥—ã–¥—É—â—É—é.
    """
    now_min = datetime.now(timezone.utc).replace(second=0, microsecond=0)
    ts = df.index[-1].to_pydatetime()
    if ts >= now_min:
        row = df.iloc[-2]
        ts = df.index[-2].to_pydatetime()
    else:
        row = df.iloc[-1]
    return ts, float(row["Open"]), float(row["High"]), float(row["Low"]), float(row["Close"])


def build_signal(o, h, l, c):
    rng_p = pips(h - l)
    body_p = pips(c - o)
    if rng_p < MIN_RANGE_PIPS or abs(body_p) < MIN_BODY_PIPS:
        return None

    side = "SELL" if c < o else "BUY"
    style = "PULLBACK-DOWN" if side == "SELL" else "PULLBACK-UP"
    entry = c

    base_tp = max(TP_MIN_PIPS, 0.9 * rng_p)
    tp_p = min(base_tp, TP_CAP_PIPS)
    sl_p = max(tp_p / RR_DEFAULT, tp_p * 0.6)

    if side == "SELL":
        tp = entry - pips_to_price(tp_p)
        sl = entry + pips_to_price(sl_p)
    else:
        tp = entry + pips_to_price(tp_p)
        sl = entry - pips_to_price(sl_p)

    return {
        "side": side,
        "style": style,
        "entry": entry,
        "tp": tp,
        "sl": sl,
        "tp_pips": tp_p,
        "sl_pips": sl_p,
        "rng_pips": rng_p,
        "body_pips": abs(body_p),
        "bar_ts": None,
        "opened_ts": None,
        "active": True,
    }


async def send_signal(sig: dict):
    txt = (
        f"üî• {sig['side']} GOLD (XAU) | M1 ({sig['style']})\n"
        f"Entry: **{fmt_price(sig['entry'])}**\n"
        f"‚úÖ TP: **{fmt_price(sig['tp'])}**  _(‚âà{sig['tp_pips']:.2f} pips)_\n"
        f"üü• SL: **{fmt_price(sig['sl'])}**  _(‚âà{sig['sl_pips']:.2f} pips)_\n"
        f"rng={sig['rng_pips']:.2f} body={sig['body_pips']:.2f}  RR‚âà{sig['tp_pips']/sig['sl_pips']:.2f}"
    )
    await bot.send_message(TARGET_CHAT_ID, txt, parse_mode="Markdown")


async def send_result(result: str, sig: dict, price: float):
    emoji = "‚úÖ" if result == "TP" else "üü•"
    txt = (
        f"{emoji} {result} hit | {sig['side']} GOLD (XAU) | M1\n"
        f"Fill: **{fmt_price(price)}**  vs target **{fmt_price(sig[result.lower()])}**\n"
        f"TP={sig['tp_pips']:.2f}p, SL={sig['sl_pips']:.2f}p  (RR‚âà{sig['tp_pips']/sig['sl_pips']:.2f})"
    )
    await bot.send_message(TARGET_CHAT_ID, txt, parse_mode="Markdown")


def crossed(val: float, target: float, side: str, kind: str) -> bool:
    if kind == "tp":
        return val >= target if side == "BUY" else val <= target
    else:
        return val <= target if side == "BUY" else val >= target


# -------------------- –î–í–ò–ñ–û–ö --------------------

async def engine_loop():
    logging.info("Engine loop started")
    while True:
        try:
            # –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è ‚Äî —Å–ª–µ–¥–∏–º —Ç–æ–ª—å–∫–æ –∑–∞ –Ω–µ–π
            if ES.active_trade and ES.active_trade.get("active", False):
                df = load_m1_history(SYMBOL, 4)
                _, o, h, l, c = last_closed_candle(df)
                ES.last_price = c

                if crossed(h, ES.active_trade["tp"], ES.active_trade["side"], "tp") or \
                   crossed(c, ES.active_trade["tp"], ES.active_trade["side"], "tp"):
                    ES.active_trade["active"] = False
                    await send_result("TP", ES.active_trade, c)
                    ES.active_trade = None
                    ES.cooldown_left = ES.cooldown_bars
                    await asyncio.sleep(POLL_SEC)
                    continue

                if crossed(l, ES.active_trade["sl"], ES.active_trade["side"], "sl") or \
                   crossed(c, ES.active_trade["sl"], ES.active_trade["side"], "sl"):
                    ES.active_trade["active"] = False
                    await send_result("SL", ES.active_trade, c)
                    ES.active_trade = None
                    ES.cooldown_left = ES.cooldown_bars
                    await asyncio.sleep(POLL_SEC)
                    continue

                await asyncio.sleep(POLL_SEC)
                continue

            # –ò—â–µ–º –Ω–æ–≤—É—é ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞ –ù–û–í–û–ô –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–µ
            df = load_m1_history(SYMBOL, HISTORY_BARS)
            bar_ts, o, h, l, c = last_closed_candle(df)
            ES.last_price = c
            ES.reset_day_if_needed(bar_ts)

            if ES.cooldown_left > 0:
                # –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º —Å–≤–µ—á–∞–º
                if ES.last_bar_ts is None or bar_ts > ES.last_bar_ts:
                    ES.cooldown_left -= 1
                    ES.last_bar_ts = bar_ts
                await asyncio.sleep(POLL_SEC)
                continue

            if ES.last_bar_ts is None or bar_ts > ES.last_bar_ts:
                ES.last_bar_ts = bar_ts

                if ES.signals_today >= ES.limit_per_day:
                    await asyncio.sleep(POLL_SEC)
                    continue

                sig = build_signal(o, h, l, c)
                if sig:
                    sig["bar_ts"] = bar_ts
                    sig["opened_ts"] = datetime.now(timezone.utc)
                    ES.active_trade = sig
                    ES.signals_today += 1
                    await send_signal(sig)

            await asyncio.sleep(POLL_SEC)

        except Exception as e:
            logging.exception("Engine error: %s", e)
            await asyncio.sleep(5.0)  # –ø–∞—É–∑–∞ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å


# -------------------- –ö–û–ú–ê–ù–î–´ TG --------------------

@dp.message_handler(commands=["start"], allowed=True)
async def cmd_start(m: types.Message):
    await m.answer(
        "–ì–æ—Ç–æ–≤. –î–∞—é –û–î–ò–ù —Å–∏–≥–Ω–∞–ª –ø–æ GOLD (M1) –∏ –∂–¥—É –∏—Å—Ö–æ–¥ (TP/SL). "
        "–ö–æ–º–∞–Ω–¥—ã: /status, ¬´–ó–æ–ª–æ—Ç–æ¬ª, ¬´–ö–æ–º–∞–Ω–¥—ã¬ª.",
    )


@dp.message_handler(commands=["status"], allowed=True)
async def cmd_status(m: types.Message):
    last_age = "-"
    if ES.last_bar_ts:
        last_age = f"{int((datetime.now(timezone.utc)-ES.last_bar_ts).total_seconds())}s"
    act = ES.active_trade["side"] if ES.active_trade else "None"
    await m.answer(
        "```\n"
        f"mode: XAU\n"
        f"alive: OK | poll~{POLL_SEC:.1f}s\n"
        f"cooldown_bars={ES.cooldown_bars} last_close_age={last_age}\n"
        f"signals_today={ES.signals_today} (limit={ES.limit_per_day})\n"
        f"last_price={fmt_price(ES.last_price) if ES.last_price else 'None'}\n"
        f"active={act}\n"
        f"tp_min={TP_MIN_PIPS} cap={TP_CAP_PIPS} min_range={MIN_RANGE_PIPS} min_body={MIN_BODY_PIPS}\n"
        "```",
        parse_mode="Markdown",
    )


@dp.message_handler(lambda m: m.text and m.text.lower().strip() in ("–∑–æ–ª–æ—Ç–æ", "xau", "gold"), allowed=True)
async def set_gold(m: types.Message):
    await m.answer("‚úÖ –†–µ–∂–∏–º: GOLD (XAU) M1.")


@dp.message_handler(lambda m: m.text and "–∫–æ–º–∞–Ω–¥" in m.text.lower(), allowed=True)
async def cmd_help(m: types.Message):
    await m.answer(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "‚Ä¢ /status ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "‚Ä¢ ¬´–ó–æ–ª–æ—Ç–æ¬ª ‚Äî —Ä–µ–∂–∏–º XAU M1\n\n"
        "–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï TP/SL –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ."
    )


@dp.message_handler()
async def ignore(m: types.Message):
    pass


# -------------------- –ó–ê–ü–£–°–ö --------------------

async def on_startup(_):
    asyncio.create_task(engine_loop())
    logging.info("Bot started, engine scheduled.")


if __name__ == "__main__":
    # aiogram v2.x
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

