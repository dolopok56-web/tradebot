# signal_bot.py
# -*- coding: utf-8 -*-

import os
import asyncio
import logging
from datetime import datetime, timezone

import pandas as pd
import yfinance as yf

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher.filters import BoundFilter

# =============== –ù–ê–°–¢–†–û–ô–ö–ò ===============

SYMBOL = "GC=F"           # Gold futures –≤ Yahoo
TF = "1m"                 # –±–∞–∑–æ–≤—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
PIP = 1.0                 # 1 –ø–∏–ø—Å = 1.0 –ø—É–Ω–∫—Ç–∞ (–∫–∞–∫ —É —Ç–≤–æ–µ–≥–æ –±—Ä–æ–∫–µ—Ä–∞)
POLL_SEC = 0.6            # –æ–ø—Ä–æ—Å —Ñ–∏–¥–∞ (—Å–µ–∫)
HISTORY_BARS = 300        # —Å–∫–æ–ª—å–∫–æ –ú1 –±–µ—Ä—ë–º –¥–ª—è —Ä–∞–±–æ—Ç—ã

# —Ñ–∏–ª—å—Ç—Ä—ã —Å–≤–µ—á–µ–π, —á—Ç–æ–±—ã –Ω–µ –±—Ä–∞—Ç—å ¬´–ø—ã–ª—å¬ª
MIN_RANGE_PIPS = 6.0      # –º–∏–Ω–∏–º—É–º (High-Low) –≤ –ø–∏–ø—Å–∞—Ö
MIN_BODY_PIPS = 2.0       # –º–∏–Ω–∏–º—É–º —Ç–µ–ª–æ —Å–≤–µ—á–∏ –≤ –ø–∏–ø—Å–∞—Ö
TP_MIN_PIPS = 8.0         # –º–∏–Ω. TP
TP_CAP_PIPS = 50.0        # –º–∞–∫—Å. TP (–æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å)
RR = 1.5                  # —Ü–µ–ª–µ–≤–æ–π RR

# —Ç—Ä–µ–Ω–¥ –ú5: —Å–∫–æ–ª—å–∫–æ –ú5-–±–∞—Ä–æ–≤ –±–µ—Ä—ë–º –¥–ª—è –Ω–∞–∫–ª–æ–Ω–∞
M5_TREND_BARS = 6         # ~30 –º–∏–Ω—É—Ç —Ç—Ä–µ–Ω–¥–∞
M5_MIN_SLOPE_PIPS = 2.0   # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–∫–ª–æ–Ω —Ç—Ä–µ–Ω–¥–∞ –≤ –ø–∏–ø—Å–∞—Ö, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º

# –õ–∏–º–∏—Ç—ã
DAILY_LIMIT = 30          # —Å–∏–≥–Ω–∞–ª—ã/–¥–µ–Ω—å –º–∞–∫—Å–∏–º—É–º

# –¢–æ–∫–µ–Ω—ã (–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –∏–ª–∏ –≤–ø–∏—Å–∞—Ç—å —Å—é–¥–∞)
MAIN_BOT_TOKEN = os.getenv("MAIN_BOT_TOKEN", "7930269505:AAEBq25Gc4XLksdelqmAMfZnyRdyD_KUzSs")
OWNER_ID = int(os.getenv("OWNER_ID", "6784470762") or 0)
TARGET_CHAT_ID = int(os.getenv("TARGET_CHAT_ID", "0") or 0)

# =========================================

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s",
    level=logging.INFO,
)

if not MAIN_BOT_TOKEN or not TARGET_CHAT_ID or not OWNER_ID:
    logging.error("–ó–∞–¥–∞–π MAIN_BOT_TOKEN / OWNER_ID / TARGET_CHAT_ID (env –∏–ª–∏ –≤ –∫–æ–¥–µ).")
    raise SystemExit(1)

bot = Bot(token=MAIN_BOT_TOKEN)
dp = Dispatcher(bot)

# --- –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É/—Ü–µ–ª–∏
class AllowedChat(BoundFilter):
    key = "allowed"

    def __init__(self, allowed: bool):
        self.allowed = allowed

    async def check(self, msg: types.Message) -> bool:
        if msg.chat and msg.chat.id == TARGET_CHAT_ID:
            return True
        if msg.from_user and msg.from_user.id == OWNER_ID:
            return True
        return False

dp.filters_factory.bind(AllowedChat)

# --- —Å–æ—Å—Ç–æ—è–Ω–∏–µ
class EngineState:
    def __init__(self):
        self.last_bar_ts = None              # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π –ú1
        self.last_price = None
        self.signals_today = 0
        self.active_trade = None             # dict | None
        self.started_utc_date = datetime.now(timezone.utc).date()

ES = EngineState()

# ========= —É—Ç–∏–ª–∏—Ç—ã =========

def pips_from_move(dpts: float) -> float:
    return abs(dpts) / PIP

def price_from_pips(pips_val: float) -> float:
    return pips_val * PIP

def fmt_price(x: float) -> str:
    return f"{x:,.2f}".replace(",", " ")

def load_m1_history(symbol: str, bars: int) -> pd.DataFrame:
    """
    –ò—Å—Ç–æ—Ä–∏—è –ú1. –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —É Yahoo —á–∞—Å—Ç–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è ‚Äî –ø–æ—ç—Ç–æ–º—É –±–µ—Ä—ë–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é,
    –µ—Å–ª–∏ —Ç–∞–π–º—Å—Ç–∞–º–ø —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç–æ–π.
    """
    df = yf.download(
        tickers=symbol,
        period="2d",
        interval="1m",
        auto_adjust=True,
        progress=False,
        threads=False,
    )
    if not isinstance(df, pd.DataFrame) or df.empty:
        raise RuntimeError("Empty history")

    df = df.tail(bars + 5).copy()
    df.index = df.index.tz_convert("UTC")
    return df

def pick_last_closed(df: pd.DataFrame):
    now_min = datetime.now(timezone.utc).replace(second=0, microsecond=0)
    ts = df.index[-1].to_pydatetime()
    if ts >= now_min:
        row = df.iloc[-2]
        ts = df.index[-2].to_pydatetime()
    else:
        row = df.iloc[-1]
    return ts, float(row["Open"]), float(row["High"]), float(row["Low"]), float(row["Close"])

def m5_trend_from_m1(df_m1: pd.DataFrame):
    """
    –î–µ–ª–∞–µ–º –ú5 –∏–∑ –ú1 –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ–º –Ω–∞–∫–ª–æ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ M5_TREND_BARS:
    > 0 ‚Äî –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥, < 0 ‚Äî –Ω–∏—Å—Ö–æ–¥—è—â–∏–π, –æ–∫–æ–ª–æ 0 ‚Äî —Ñ–ª—ç—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º: 'UP' | 'DOWN' | 'FLAT'
    """
    df = df_m1.resample("5T").agg({"Open":"first","High":"max","Low":"min","Close":"last"}).dropna()
    if len(df) < M5_TREND_BARS + 1:
        return "FLAT"

    tail = df.tail(M5_TREND_BARS)
    start = float(tail["Close"].iloc[0])
    end = float(tail["Close"].iloc[-1])
    move_pips = pips_from_move(end - start)

    if move_pips < M5_MIN_SLOPE_PIPS:
        return "FLAT"
    return "UP" if end > start else "DOWN"

def build_signal(side: str, entry: float, rng_pips: float, body_pips: float):
    # TP –∫–∞–∫ max(MIN, 0.7*rng) –∏ –Ω–µ –±–æ–ª—å—à–µ CAP
    base_tp = max(TP_MIN_PIPS, 0.7 * rng_pips)
    tp_pips = min(base_tp, TP_CAP_PIPS)

    sl_pips = max(tp_pips / RR, tp_pips * 0.6)

    if side == "SELL":
        tp = entry - price_from_pips(tp_pips)
        sl = entry + price_from_pips(sl_pips)
    else:
        tp = entry + price_from_pips(tp_pips)
        sl = entry - price_from_pips(sl_pips)

    return {
        "side": side,
        "entry": entry,
        "tp": tp,
        "sl": sl,
        "tp_pips": tp_pips,
        "sl_pips": sl_pips,
        "rng_pips": rng_pips,
        "body_pips": body_pips,
        "bar_ts": None,
        "active": True,
    }

def crossed(value: float, target: float, side: str, kind: str) -> bool:
    # kind: 'tp' / 'sl'
    if kind == "tp":
        return value >= target if side == "BUY" else value <= target
    else:
        return value <= target if side == "BUY" else value >= target

async def send_signal(sig: dict):
    txt = (
        f"üî• {sig['side']} GOLD (XAU) | M1\n"
        f"Entry: **{fmt_price(sig['entry'])}**\n"
        f"‚úÖ TP: **{fmt_price(sig['tp'])}**  (~{sig['tp_pips']:.2f} pips)\n"
        f"üü• SL: **{fmt_price(sig['sl'])}**  (~{sig['sl_pips']:.2f} pips)\n"
        f"rng={sig['rng_pips']:.2f} body={sig['body_pips']:.2f}  RR‚âà{sig['tp_pips']/sig['sl_pips']:.2f}"
    )
    await bot.send_message(TARGET_CHAT_ID, txt, parse_mode="Markdown")

async def send_result(kind: str, sig: dict, fill: float):
    emoji = "‚úÖ" if kind == "TP" else "üü•"
    key = "tp" if kind == "TP" else "sl"
    txt = (
        f"{emoji} {kind} hit | {sig['side']} GOLD (XAU) | M1\n"
        f"Fill: **{fmt_price(fill)}**  vs target **{fmt_price(sig[key])}**\n"
        f"TP={sig['tp_pips']:.2f}p, SL={sig['sl_pips']:.2f}p  (RR‚âà{sig['tp_pips']/sig['sl_pips']:.2f})"
    )
    await bot.send_message(TARGET_CHAT_ID, txt, parse_mode="Markdown")

# ========= –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª =========

async def engine():
    logging.info("Engine started.")
    while True:
        try:
            # —Å–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ø–æ UTC-–¥–∞—Çe
            today = datetime.now(timezone.utc).date()
            if today != ES.started_utc_date:
                ES.started_utc_date = today
                ES.signals_today = 0

            # –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º TP/SL
            if ES.active_trade and ES.active_trade.get("active"):
                df = load_m1_history(SYMBOL, 5)
                _, o, h, l, c = pick_last_closed(df)
                ES.last_price = c

                if crossed(h, ES.active_trade["tp"], ES.active_trade["side"], "tp") or crossed(c, ES.active_trade["tp"], ES.active_trade["side"], "tp"):
                    ES.active_trade["active"] = False
                    await send_result("TP", ES.active_trade, c)
                    ES.active_trade = None

                elif crossed(l, ES.active_trade["sl"], ES.active_trade["side"], "sl") or crossed(c, ES.active_trade["sl"], ES.active_trade["side"], "sl"):
                    ES.active_trade["active"] = False
                    await send_result("SL", ES.active_trade, c)
                    ES.active_trade = None

                await asyncio.sleep(POLL_SEC)
                continue

            # –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π ‚Äî –∏—â–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Ç–æ–ª—å–∫–æ –Ω–∞ –ù–û–í–û–ô –∑–∞–∫—Ä—ã—Ç–æ–π –ú1
            df = load_m1_history(SYMBOL, HISTORY_BARS)
            bar_ts, o, h, l, c = pick_last_closed(df)
            ES.last_price = c

            # –∞–Ω—Ç–∏—Å–ø–∞–º: —Ç–æ–ª—å–∫–æ –ø–æ –Ω–æ–≤–æ–π —Å–≤–µ—á–µ
            if ES.last_bar_ts is not None and bar_ts <= ES.last_bar_ts:
                await asyncio.sleep(POLL_SEC)
                continue
            ES.last_bar_ts = bar_ts

            if ES.signals_today >= DAILY_LIMIT:
                await asyncio.sleep(POLL_SEC)
                continue

            # —Ñ–∏–ª—å—Ç—Ä –ø–æ –ú5-—Ç—Ä–µ–Ω–¥—É
            trend = m5_trend_from_m1(df)
            rng_p = pips_from_move(h - l)
            body_p = pips_from_move(c - o)

            # –±–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–≤–µ—á–∏
            if rng_p < MIN_RANGE_PIPS or body_p < MIN_BODY_PIPS or trend == "FLAT":
                await asyncio.sleep(POLL_SEC)
                continue

            # –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç–æ—Ä–æ–Ω—É –≤ —Å—Ç–æ—Ä–æ–Ω—É —Ç—Ä–µ–Ω–¥–∞
            side = None
            if trend == "UP" and c > o:
                side = "BUY"
            elif trend == "DOWN" and c < o:
                side = "SELL"

            if not side:
                await asyncio.sleep(POLL_SEC)
                continue

            sig = build_signal(side, c, rng_p, body_p)
            sig["bar_ts"] = bar_ts
            ES.active_trade = sig
            ES.signals_today += 1
            await send_signal(sig)

            await asyncio.sleep(POLL_SEC)

        except Exception as e:
            logging.exception(f"Engine error: {e}")
            await asyncio.sleep(1.0)

# ========= –∫–æ–º–∞–Ω–¥—ã TG =========

@dp.message_handler(commands=["start"], allowed=True)
async def _start(m: types.Message):
    await m.answer("–ì–æ—Ç–æ–≤. –î–∞—é **–æ–¥–∏–Ω** —Å–∏–≥–Ω–∞–ª –∑–∞ —Ä–∞–∑ –ø–æ XAU (–ú1) –≤ —Å—Ç–æ—Ä–æ–Ω—É —Ç—Ä–µ–Ω–¥–∞ –ú5. –ö–æ–º–∞–Ω–¥—ã: /status, ¬´–ó–æ–ª–æ—Ç–æ¬ª, ¬´–ö–æ–º–∞–Ω–¥—ã¬ª.")

@dp.message_handler(commands=["status"], allowed=True)
async def _status(m: types.Message):
    last_age = "-"
    if ES.last_bar_ts:
        last_age = f"{int((datetime.now(timezone.utc)-ES.last_bar_ts).total_seconds())}s"
    act = ES.active_trade["side"] if ES.active_trade else "None"
    await m.answer(
        "```\n"
        f"mode: XAU\n"
        f"alive: OK | poll~{POLL_SEC:.1f}s\n"
        f"last_close_age={last_age}  signals_today={ES.signals_today}/{DAILY_LIMIT}\n"
        f"last_price={fmt_price(ES.last_price) if ES.last_price else 'None'}  active={act}\n"
        f"filters: rng>={MIN_RANGE_PIPS}p body>={MIN_BODY_PIPS}p  RR={RR}\n"
        f"tp_min={TP_MIN_PIPS}p cap={TP_CAP_PIPS}p  PIP={PIP}\n"
        "```",
        parse_mode="Markdown",
    )

@dp.message_handler(lambda m: m.text and m.text.lower().strip() in ("–∑–æ–ª–æ—Ç–æ","xau","gold"), allowed=True)
async def _gold(m: types.Message):
    await m.answer("‚úÖ –†–µ–∂–∏–º: GOLD (XAU) M1. –§–∏–ª—å—Ç—Ä —Ç—Ä–µ–Ω–¥–∞ –ú5 –∞–∫—Ç–∏–≤–µ–Ω.")

@dp.message_handler(lambda m: m.text and "–∫–æ–º–∞–Ω–¥" in m.text.lower(), allowed=True)
async def _help(m: types.Message):
    await m.answer("–ö–æ–º–∞–Ω–¥—ã: /start, /status, ¬´–ó–æ–ª–æ—Ç–æ¬ª. –ë–æ—Ç —à–ª—ë—Ç –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ TP/SL –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.")

@dp.message_handler()
async def _ignore(m: types.Message):
    pass

# ========= –∑–∞–ø—É—Å–∫ =========

async def on_startup(_):
    asyncio.create_task(engine())
    logging.info("Bot started.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
