# signal_bot.py
# -*- coding: utf-8 -*-

import os
import time
import logging
import asyncio
from datetime import datetime, timezone, timedelta

import pandas as pd
import yfinance as yf

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher.filters import BoundFilter

# ==================== CONFIG ====================

SYMBOL = "GC=F"          # GOLD futures —É Yahoo
TF = "1m"                # M1
PIP = 0.1                # 1 "–ø–∏–ø" –¥–ª—è –∑–æ–ª–æ—Ç–∞ = 0.1
POLL_SEC = 0.3           # —á–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞ —Ñ–∏–¥–∞
HISTORY_BARS = 120       # —Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á –±–µ—Ä—ë–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏

# –§–∏–ª—å—Ç—Ä—ã —Å–≤–µ—á–µ–π (—á—Ç–æ–±—ã –Ω–µ –±—Ä–∞—Ç—å ¬´–ø—ã–ª—å¬ª)
MIN_RANGE_PIPS = 3.0     # min High-Low –≤ –ø–∏–ø—Å–∞—Ö
MIN_BODY_PIPS = 1.0      # min |Close-Open| –≤ –ø–∏–ø—Å–∞—Ö
TP_MIN_PIPS = 4.0        # –º–∏–Ω–∏–º—É–º –¢–†
TP_CAP_PIPS = 30.0       # –º–∞–∫—Å–∏–º—É–º –¢–† (–æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å)
RR_DEFAULT = 1.5         # RR –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ–º SL –æ—Ç TP (–Ω–∏–∂–µ —É—Ç–æ—á–Ω—è–µ–º)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞—Ç—å)
MAIN_BOT_TOKEN = os.getenv("MAIN_BOT_TOKEN", "7930269505:AAEBq25Gc4XLksdelqmAMfZnyRdyD_KUzSs")
OWNER_ID = int(os.getenv("OWNER_ID", "6784470762") or 0)
TARGET_CHAT_ID = int(os.getenv("TARGET_CHAT_ID", "6784470762") or 0)

# =================================================

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s",
    level=logging.INFO,
)

if not MAIN_BOT_TOKEN or not TARGET_CHAT_ID or not OWNER_ID:
    logging.error("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã MAIN_BOT_TOKEN / OWNER_ID / TARGET_CHAT_ID")
    raise SystemExit(1)

bot = Bot(token=MAIN_BOT_TOKEN)
dp = Dispatcher(bot)

# --- –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É/—Ü–µ–ª–∏ ---
class AllowedChat(BoundFilter):
    key = "allowed"

    def __init__(self, allowed: bool):
        self.allowed = allowed

    async def check(self, msg: types.Message) -> bool:
        if msg.chat and msg.chat.id == TARGET_CHAT_ID:
            return True
        if msg.from_user and msg.from_user.id == OWNER_ID:
            return True
        return False

dp.filters_factory.bind(AllowedChat)

# --- —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏ ---
class EngineState:
    def __init__(self):
        self.mode = "XAU"                 # –æ–¥–∏–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        self.last_bar_ts = None           # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏ (UTC)
        self.last_price = None
        self.signals_today = 0
        self.limit_per_day = 50
        self.cooldown_bars = 0            # 0 = —Å–∏–≥–Ω–∞–ª –º–æ–∂–Ω–æ –Ω–∞ –∫–∞–∂–¥—É—é –∑–∞–∫—Ä—ã—Ç—É—é —Å–≤–µ—á—É
        self.cooldown_left = 0
        self.active_trade = None          # dict | None
        self.poll_ok = True
        self.last_fetch_ok = None

    def reset_day_counters_if_new_day(self):
        now_utc = datetime.now(timezone.utc)
        # –æ–±–Ω—É–ª–∏–º —Å—á—ë—Ç—á–∏–∫–∏ –≤ 00:00 UTC
        if self.last_bar_ts and now_utc.date() != self.last_bar_ts.date():
            self.signals_today = 0
            self.cooldown_left = 0

ES = EngineState()

# ---------- –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ----------

def pips(value: float) -> float:
    """—Å–∫–æ–ª—å–∫–æ –ø–∏–ø—Å–æ–≤ –≤ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã"""
    return abs(value) / PIP

def pips_to_price(pips_count: float) -> float:
    return pips_count * PIP

def fmt_price(x: float) -> str:
    return f"{x:,.2f}".replace(",", " ")

def load_m1_history(symbol: str, bars: int) -> pd.DataFrame:
    """
    –ë–µ—Ä—ë–º –∏—Å—Ç–æ—Ä–∏—é M1. yfinance –∏–Ω–æ–≥–¥–∞ –æ—Ç–¥–∞—ë—Ç –Ω–µ–∑–∞–∫—Ä—ã—Ç—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É ‚Äî
    –ø–æ—ç—Ç–æ–º—É —Å—á–∏—Ç–∞–µ–º –∑–∞–∫—Ä—ã—Ç–æ–π –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç–æ–π.
    """
    df = yf.download(
        tickers=symbol,
        period="2d",
        interval="1m",
        progress=False,
        threads=False,
    )
    if not isinstance(df, pd.DataFrame) or df.empty:
        raise RuntimeError("Empty history")

    df = df.tail(bars + 3).copy()
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤ UTC
    df.index = df.index.tz_convert("UTC")
    return df

def last_closed_candle(df: pd.DataFrame):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã—Ç—É—é —Å–≤–µ—á—É (ts, o, h, l, c).
    –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ == —Ç–µ–∫—É—â–∞—è –Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è –º–∏–Ω—É—Ç–∞ ‚Äî –±–µ—Ä—ë–º –ø—Ä–µ–¥—ã–¥—É—â—É—é.
    """
    now_utc_min = datetime.now(timezone.utc).replace(second=0, microsecond=0)
    ts = df.index[-1].to_pydatetime()
    if ts >= now_utc_min:
        # –Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è ‚Äî –±–µ—Ä—ë–º -2
        ts = df.index[-2].to_pydatetime()
        row = df.iloc[-2]
    else:
        row = df.iloc[-1]

    return ts, float(row["Open"]), float(row["High"]), float(row["Low"]), float(row["Close"])

def build_signal_from_candle(o, h, l, c):
    """
    –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞:
    - –µ—Å–ª–∏ —Ç–µ–ª–æ –≤–Ω–∏–∑ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π ‚Üí SELL (Pullback-Down)
    - –µ—Å–ª–∏ —Ç–µ–ª–æ –≤–≤–µ—Ä—Ö –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π ‚Üí BUY  (Pullback-Up)
    –í–∞—Ä–∏–∞–Ω—Ç—ã BREAKOUT/PULLBACK —Ç–æ–ª—å–∫–æ –∫–∞–∫ –º–µ—Ç–∫–∞ ‚Äî —á–∏—Å—Ç–æ –∫–æ—Å–º–µ—Ç–∏–∫–∞.
    """
    rng_pips = pips(h - l)
    body_pips = pips(c - o)

    if rng_pips < MIN_RANGE_PIPS or abs(body_pips) < MIN_BODY_PIPS:
        return None

    if c < o:
        side = "SELL"
        style = "PULLBACK-DOWN"
        entry = c
    else:
        side = "BUY"
        style = "PULLBACK-UP"
        entry = c

    # TP/SL:
    # –±–∞–∑–æ–≤—ã–π TP ‚Äî max(MIN, 0.9 * rng) –Ω–æ capped
    base_tp = max(TP_MIN_PIPS, 0.9 * rng_pips)
    tp_pips = min(base_tp, TP_CAP_PIPS)

    # SL –ø–æ–¥ RR‚âà1.5 (–º–∏–Ω–∏–º—É–º 0.6*TP —á—Ç–æ–±—ã –Ω–µ —Å–ª–∏—à–∫–æ–º —É–∑–∫–∏–π)
    sl_pips = max(tp_pips / RR_DEFAULT, tp_pips * 0.6)

    if side == "SELL":
        tp = entry - pips_to_price(tp_pips)
        sl = entry + pips_to_price(sl_pips)
    else:
        tp = entry + pips_to_price(tp_pips)
        sl = entry - pips_to_price(sl_pips)

    rr = tp_pips / sl_pips

    return {
        "side": side,
        "style": style,
        "entry": entry,
        "tp": tp,
        "sl": sl,
        "tp_pips": tp_pips,
        "sl_pips": sl_pips,
        "rng_pips": rng_pips,
        "body_pips": abs(body_pips),
        "opened_ts": None,       # –∑–∞–ø–æ–ª–Ω–∏–º, –∫–æ–≥–¥–∞ ¬´–∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º¬ª —Å–∏–≥–Ω–∞–ª
        "bar_ts": None,          # —à—Ç–∞–º–ø –±–∞—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω —Ä–æ–¥–∏–ª—Å—è
        "active": True,
    }

async def send_signal_msg(sig: dict):
    text = (
        f"üî• {sig['side']} GOLD (XAU) | M1 ({sig['style']})\n"
        f"Entry: **{fmt_price(sig['entry'])}**\n"
        f"‚úÖ TP: **{fmt_price(sig['tp'])}**  _(‚âà{sig['tp_pips']:.2f} pips)_\n"
        f"üü• SL: **{fmt_price(sig['sl'])}**  _(‚âà{sig['sl_pips']:.2f} pips)_\n"
        f"rng={sig['rng_pips']:.2f} body={sig['body_pips']:.2f}  RR‚âà{sig['tp_pips']/sig['sl_pips']:.2f}"
    )
    await bot.send_message(TARGET_CHAT_ID, text, parse_mode="Markdown")

async def send_result_msg(result: str, sig: dict, price: float):
    emoji = "‚úÖ" if result == "TP" else "üü•"
    text = (
        f"{emoji} {result} hit | {sig['side']} GOLD (XAU) | M1\n"
        f"Fill: **{fmt_price(price)}**  vs target **{fmt_price(sig[result.lower()])}**\n"
        f"TP={sig['tp_pips']:.2f}p, SL={sig['sl_pips']:.2f}p  (RR‚âà{sig['tp_pips']/sig['sl_pips']:.2f})"
    )
    await bot.send_message(TARGET_CHAT_ID, text, parse_mode="Markdown")

def price_crossed(value: float, target: float, side: str, kind: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP/SL –±–∞—Ä–æ–º (–ø–æ Close/High/Low):
    kind = 'tp'/'sl'
    """
    if kind == "tp":
        if side == "BUY":
            return value >= target
        else:
            return value <= target
    else:  # sl
        if side == "BUY":
            return value <= target
        else:
            return value >= target

# ---------- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–≤–∏–∂–∫–∞ ----------

async def engine_loop():
    logging.info("Engine loop started")
    while True:
        try:
            ES.reset_day_counters_if_new_day()

            # –ê–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞? ‚Äî —Å–ª–µ–¥–∏–º –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º TP/SL –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –∏—â–µ–º –Ω–æ–≤—É—é
            if ES.active_trade and ES.active_trade.get("active", False):
                df = load_m1_history(SYMBOL, 4)
                _, o, h, l, c = last_closed_candle(df)
                ES.last_price = c

                if price_crossed(h, ES.active_trade["tp"], ES.active_trade["side"], "tp") or \
                   price_crossed(c, ES.active_trade["tp"], ES.active_trade["side"], "tp"):
                    ES.active_trade["active"] = False
                    await send_result_msg("TP", ES.active_trade, c)
                    ES.active_trade = None
                    # –ë–∞—Ä-–∫—É–ª–¥–∞—É–Ω –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                    ES.cooldown_left = ES.cooldown_bars

                elif price_crossed(l, ES.active_trade["sl"], ES.active_trade["side"], "sl") or \
                     price_crossed(c, ES.active_trade["sl"], ES.active_trade["side"], "sl"):
                    ES.active_trade["active"] = False
                    await send_result_msg("SL", ES.active_trade, c)
                    ES.active_trade = None
                    ES.cooldown_left = ES.cooldown_bars

                await asyncio.sleep(POLL_SEC)
                continue

            # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π ‚Äî –∏—â–µ–º –Ω–æ–≤—É—é, –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ –ù–û–í–û–ô –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–µ
            df = load_m1_history(SYMBOL, HISTORY_BARS)
            bar_ts, o, h, l, c = last_closed_candle(df)
            ES.last_price = c

            if ES.cooldown_left > 0:
                # –∂–¥—ë–º N –±–∞—Ä–æ–≤
                if ES.last_bar_ts is None or bar_ts > ES.last_bar_ts:
                    ES.cooldown_left -= 1
                    ES.last_bar_ts = bar_ts
                await asyncio.sleep(POLL_SEC)
                continue

            if ES.last_bar_ts is None or bar_ts > ES.last_bar_ts:
                ES.last_bar_ts = bar_ts

                if ES.signals_today >= ES.limit_per_day:
                    await asyncio.sleep(POLL_SEC)
                    continue

                sig = build_signal_from_candle(o, h, l, c)
                if sig:
                    sig["opened_ts"] = datetime.now(timezone.utc)
                    sig["bar_ts"] = bar_ts
                    ES.active_trade = sig
                    ES.signals_today += 1
                    await send_signal_msg(sig)

            await asyncio.sleep(POLL_SEC)

        except Exception as e:
            logging.exception(f"Engine error: {e}")
            # –º–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –∫—Ä—É—Ç–∏—Ç—å –æ—à–∏–±–∫–∏ –±–µ–∑–æ—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ
            await asyncio.sleep(1.0)

# ---------- –ö–æ–º–∞–Ω–¥—ã TG ----------

@dp.message_handler(commands=["start"], allowed=True)
async def cmd_start(m: types.Message):
    await m.answer(
        "–Ø –∑–¥–µ—Å—å. –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª –∑–∞ —Ä–∞–∑ –ø–æ GOLD (M1) –∏ –∂–¥—É –∏—Å—Ö–æ–¥ (TP/SL).\n"
        "–ö–æ–º–∞–Ω–¥—ã: /status, ¬´–ó–æ–ª–æ—Ç–æ¬ª, ¬´–ö–æ–º–∞–Ω–¥—ã¬ª.",
    )

@dp.message_handler(commands=["status"], allowed=True)
async def cmd_status(m: types.Message):
    last_age = "-"
    if ES.last_bar_ts:
        last_age = f"{int((datetime.now(timezone.utc)-ES.last_bar_ts).total_seconds())}s"
    act = ES.active_trade["side"] if ES.active_trade else "None"
    await m.answer(
        "```\n"
        f"mode: XAU\n"
        f"alive: OK | poll~{POLL_SEC:.1f}s\n"
        f"cooldown_bars={ES.cooldown_bars} last_close_age={last_age}\n"
        f"signals_today={ES.signals_today} (limit={ES.limit_per_day})\n"
        f"last_price={fmt_price(ES.last_price) if ES.last_price else 'None'}\n"
        f"active={act}\n"
        f"tp_min={TP_MIN_PIPS} cap={TP_CAP_PIPS} min_range={MIN_RANGE_PIPS} min_body={MIN_BODY_PIPS}\n"
        "```",
        parse_mode="Markdown",
    )

@dp.message_handler(lambda m: m.text and m.text.lower().strip() in ("–∑–æ–ª–æ—Ç–æ", "xau", "gold"), allowed=True)
async def set_gold(m: types.Message):
    ES.mode = "XAU"
    await m.answer("‚úÖ –†–µ–∂–∏–º —É–∂–µ: GOLD (XAU) M1.")

@dp.message_handler(lambda m: m.text and "–∫–æ–º–∞–Ω–¥" in m.text.lower(), allowed=True)
async def cmd_help(m: types.Message):
    await m.answer(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "‚Ä¢ /status ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "‚Ä¢ ¬´–ó–æ–ª–æ—Ç–æ¬ª ‚Äî —Ä–µ–∂–∏–º XAU M1\n\n"
        "–ë–æ—Ç —à–ª—ë—Ç –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π (TP/SL).",
    )

@dp.message_handler()
async def ignore(m: types.Message):
    # –∏–≥–Ω–æ—Ä –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
    pass

# ---------- –ó–∞–ø—É—Å–∫ ----------

async def on_startup(_):
    # –æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å –¥–≤–∏–∂–∫–æ–º
    asyncio.create_task(engine_loop())
    logging.info("Bot started, engine scheduled.")

if __name__ == "__main__":
    # –í–ê–ñ–ù–û: –ù–ò–ö–ê–ö–ò–• asyncio.run(...) !
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

