#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# =================== XAU M1 SIGNAL BOT (LOUD) ===================
# –ß–∞—Å—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ –∑–æ–ª–æ—Ç—É XAU (GC=F / XAUUSD=X, 1m Yahoo)
# –ë–µ–∑ ATR/ RR/ –º—É–¥—Ä—ë–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤. –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞:
# - —Ä–∞–±–æ—Ç–∞ –ø–æ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–µ –ú1
# - —Å–≤–µ—á–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å "–ø—ã–ª—å—é": –¥–∏–∞–ø–∞–∑–æ–Ω >= MIN_RANGE_PIPS –∏ —Ç–µ–ª–æ >= MIN_BODY_PIPS
# - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: BREAKOUT (–∑–∞–∫—Ä—ã—Ç–∏–µ —É —ç–∫—Å—Ç—Ä–µ–º—É–º–∞ —Å–≤–µ—á–∏) –∏–ª–∏ PULLBACK –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –Ω–∞–∫–ª–æ–Ω—É
# - TP –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π: max(—Å–≤–µ—á–∞*–∫–æ—ç—Ñ, TP_MIN_PIPS), –Ω–æ –Ω–µ –≤—ã—à–µ TP_CAP_PIPS
# - SL –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞ —Ö–≤–æ—Å—Ç/–ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å—Ç—Ä–µ–º—É–º
# - –∞–Ω—Ç–∏-—Å–ø–∞–º: –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ—Ç –∂–µ —Å–∞–π–¥ –¥–≤–∞ —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥ –Ω–∞ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ —Ü–µ–Ω–µ

import os
import time
import math
import asyncio
import logging
from datetime import datetime, timezone

import aiohttp
import pandas as pd

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message
from aiogram.filters import Command

# =================== SETTINGS ===================

VERSION = "XAU-M1 Loud v1.0"

# –¢–æ–∫–µ–Ω—ã/—á–∞—Ç—ã (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ ENV)
MAIN_BOT_TOKEN = os.getenv("MAIN_BOT_TOKEN", "7930269505:AAEBq25Gc4XLksdelqmAMfZnyRdyD_KUzSs")
OWNER_ID       = int(os.getenv("OWNER_ID", "6784470762"))
TARGET_CHAT_ID = int(os.getenv("TARGET_CHAT_ID", str(OWNER_ID)))

# –°–∏–º–≤–æ–ª—ã –∏ —Ñ–∏–¥—ã
SYMBOL  = "XAU"                    # –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∏–º—è
NAME    = "GOLD (XAU)"             # –ø–æ–¥–ø–∏—Å—å –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
TICKERS = ["GC=F", "XAUUSD=X"]     # –ø–æ—Ä—è–¥–æ–∫ –æ–ø—Ä–æ—Å–∞ –Ω–∞ Yahoo, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π, –≥–¥–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ

# –ß–∞—Å—Ç–æ—Ç–∞ –∏ —Ä–µ–∂–∏–º
POLL_SEC        = 0.30             # –æ–ø—Ä–æ—Å –ª–µ–Ω—Ç—ã
PER_BAR_MODE    = True             # —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é –∫–∞–∂–¥–æ–π –ú1, –µ—Å–ª–∏ —Å–≤–µ—á–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è
COOLDOWN_BARS   = 0                # 0 = –º–æ–∂–Ω–æ –∫–∞–∂–¥—ã–π –±–∞—Ä; 2 = —Ä–∞–∑ –≤ ~3 –º–∏–Ω—É—Ç—ã
MAX_SIGNALS_DAY = 50               # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ –¥–µ–Ω—å

# –ü–æ—Ä–æ–≥ ¬´–Ω–µ –ø—ã–ª—å¬ª
MIN_RANGE_PIPS  = 3.0              # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π High-Low —É —Å–≤–µ—á–∏, —á—Ç–æ–±—ã –≥–æ–≤–æ—Ä–∏—Ç—å
MIN_BODY_PIPS   = 1.0              # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ |Close-Open|

# TP/SL
TP_MIN_PIPS     = 4.0              # –º–∏–Ω–∏–º—É–º, –∫–∞–∫ –ø—Ä–æ—Å–∏–ª
TP_CAP_PIPS     = 30.0             # –Ω–µ —Å—Ç–∞–≤–∏–º –∫–æ—Å–º–æ—Å
TP_COEF         = 1.4              # TP = max(range*–∫–æ—ç—Ñ, TP_MIN), –Ω–æ ‚â§ TP_CAP
SL_TAIL_PAD     = 0.8              # SL –∑–∞ —Ç–µ–Ω—å—é –Ω–∞ ~0.8 –ø—É–Ω–∫—Ç–∞
SL_MIN_PIPS     = 5.0              # –Ω–∏–∂–Ω—è—è –ø–ª–∞–Ω–∫–∞ –¥–ª—è SL (—á—É—Ç—å —à–∏—Ä–µ, —á—Ç–æ–±—ã –Ω–µ —Å–¥—É–≤–∞–ª–æ)
SL_MAX_PIPS     = 18.0             # –≤–µ—Ä—Ö–Ω—è—è (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)

# –ú–µ–ª–æ—á–∏
HTTP_TIMEOUT    = 12
ROBUST_HEADERS  = {"User-Agent": "Mozilla/5.0"}
LOG_EVERY_SEC   = 300

# =================== TELEGRAM ===================

router    = Router()
bot_main  = Bot(MAIN_BOT_TOKEN, default=DefaultBotProperties(parse_mode=None))
dp        = Dispatcher()
dp.include_router(router)

async def send(text: str):
    try:
        await bot_main.send_message(TARGET_CHAT_ID, text)
    except Exception as e:
        logging.error(f"send error: {e}")

@router.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(f"‚úÖ {VERSION}\n–†–µ–∂–∏–º: {NAME} M1.\n–ù–∞–ø–∏—à–∏: —Å—Ç–∞—Ç—É—Å / –∑–æ–ª–æ—Ç–æ")

@router.message(F.text.casefold() == "–∑–æ–ª–æ—Ç–æ")
async def cmd_gold(m: Message):
    await m.answer("‚úÖ –†–µ–∂–∏–º —É–∂–µ: GOLD (XAU) M1.")

@router.message(F.text.casefold() == "—Å—Ç–∞—Ç—É—Å")
async def cmd_status(m: Message):
    s = state
    lines = [
        f"mode: XAU (requested: XAU)",
        f"alive: OK | poll={POLL_SEC}s",
        f"cooldown_bars={COOLDOWN_BARS} last_close_age={int(time.time()-s.get('last_close_ts',0))}s",
        f"signals_today={s.get('signals_today',0)} (limit={MAX_SIGNALS_DAY})",
        f"last_side={s.get('last_side','-')} last_price={s.get('last_price','-')}",
        f"tp_min={TP_MIN_PIPS} cap={TP_CAP_PIPS} min_range={MIN_RANGE_PIPS} min_body={MIN_BODY_PIPS}",
    ]
    await m.answer("`\n" + "\n".join(lines) + "\n`")

# =================== PRICE FEED ===================

_prices_cache = {"df": None, "ts": 0.0, "src": ""}

async def yahoo_json(session: aiohttp.ClientSession, url: str) -> dict:
    try:
        async with session.get(url, timeout=HTTP_TIMEOUT, headers=ROBUST_HEADERS) as r:
            if r.status == 200:
                return await r.json(content_type=None)
    except:
        pass
    return {}

def df_from_yahoo(payload: dict) -> pd.DataFrame:
    try:
        r = payload.get("chart", {}).get("result", [])[0]
        ts = r.get("timestamp", [])
        q  = r.get("indicators", {}).get("quote", [])[0]
        if not ts or not q:
            return pd.DataFrame()
        df = pd.DataFrame({
            "Open":  q.get("open",  []),
            "High":  q.get("high",  []),
            "Low":   q.get("low",   []),
            "Close": q.get("close", []),
        }, index=pd.to_datetime(ts, unit="s"))
        df = df.ffill().bfill().dropna()
        for c in ("Open","High","Low","Close"):
            df = df[df[c] > 0]
        return df.tail(2000).reset_index(drop=True)
    except:
        return pd.DataFrame()

async def get_df(session: aiohttp.ClientSession) -> pd.DataFrame:
    now = time.time()
    if _prices_cache["df"] is not None and now - _prices_cache["ts"] < 0.5:
        return _prices_cache["df"]

    # –ø—Ä–æ–±—É–µ–º —Ç–∏–∫–∏ –ø–æ —Ç–∏–∫–µ—Ä–∞–º –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for t in TICKERS:
        url = f"https://query1.finance.yahoo.com/v8/finance/chart/{t}?interval=1m&range=2d"
        df = df_from_yahoo(await yahoo_json(session, url))
        if not df.empty:
            _prices_cache.update({"df": df, "ts": now, "src": t})
            return df
    return pd.DataFrame()

# =================== LOGIC ===================

state = {
    "last_bar_idx": -1,
    "last_close_ts": 0.0,
    "last_signal_bar": -999,
    "last_side": None,
    "last_price": None,
    "signals_today": 0,
    "day": None,
}

def reset_day_if_needed():
    d = datetime.utcnow().date().isoformat()
    if state["day"] != d:
        state["day"] = d
        state["signals_today"] = 0

def pips(x: float) -> float:
    return float(x)

def fmt(x: float) -> str:
    return f"{x:.2f}"

def candle_signal(o: float, h: float, l: float, c: float, prev_closes: list) -> dict|None:
    rng  = h - l
    body = abs(c - o)
    if rng < MIN_RANGE_PIPS or body < MIN_BODY_PIPS:
        return None

    # breakout, –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä—è–¥–æ–º —Å —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–º —Å–≤–µ—á–∏
    near_top = (h - c) <= 0.6
    near_bot = (c - l) <= 0.6

    # –ø—Ä–æ—Å—Ç–æ–π –Ω–∞–∫–ª–æ–Ω: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 –∑–∞–∫—Ä—ã—Ç–∏–π
    slope = 0.0
    if len(prev_closes) >= 8:
        slope = prev_closes[-1] - prev_closes[-8]

    side = None
    reason = ""
    if near_top or slope > 0:
        side = "BUY"; reason = "BREAKOUT" if near_top else "PULLBACK-UP"
    if near_bot or slope < 0:
        # –µ—Å–ª–∏ –æ–±–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ ‚Äî –±–µ—Ä—ë–º —á—Ç–æ –±–ª–∏–∂–µ –∫ —ç–∫—Å—Ç—Ä–µ–º—É–º—É
        if side is None:
            side = "SELL"; reason = "BREAKOUT" if near_bot else "PULLBACK-DOWN"
        else:
            # –≤—ã–±—Ä–∞—Ç—å –±–æ–ª–µ–µ –æ—á–µ–≤–∏–¥–Ω—ã–π: —Å—Ä–∞–≤–Ω–∏–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞
            dist_top = h - c
            dist_bot = c - l
            if dist_bot < dist_top:
                side = "SELL"; reason = "BREAKOUT" if near_bot else "PULLBACK-DOWN"

    if side is None:
        return None

    # entry ‚Äî –∑–∞–∫—Ä—ã—Ç–∏–µ –±–∞—Ä–∞
    entry = c

    # TP –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π
    raw_tp = max(rng * TP_COEF, TP_MIN_PIPS)
    raw_tp = min(raw_tp, TP_CAP_PIPS)

    if side == "BUY":
        tp = entry + raw_tp
        # SL ‚Äî –∑–∞ —Ç–µ–Ω—å—é –∏–ª–∏ –º–∏–Ω–∏–º—É–º–æ–º –±–∞—Ä–∞
        sl = min(entry - SL_MIN_PIPS, l - SL_TAIL_PAD)
        sl = max(entry - SL_MAX_PIPS, sl)  # –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≥–ª—É–±–∏–Ω—É
    else:
        tp = entry - raw_tp
        sl = max(entry + SL_MIN_PIPS, h + SL_TAIL_PAD)
        sl = min(entry + SL_MAX_PIPS, sl)

    if abs(tp - entry) < TP_MIN_PIPS:
        return None

    return {
        "side": side,
        "entry": entry,
        "tp": tp,
        "sl": sl,
        "rng": rng,
        "body": body,
        "reason": reason,
    }

def text_signal(sig: dict) -> str:
    side = "BUY" if sig["side"] == "BUY" else "SELL"
    rr   = abs(sig["tp"] - sig["entry"]) / max(abs(sig["entry"] - sig["sl"]), 1e-9)
    return (
        f"üî• {side} {NAME} | M1 ({sig['reason']})\n"
        f"Entry: {fmt(sig['entry'])}\n"
        f"‚úÖ TP: **{fmt(sig['tp'])}**\n"
        f"üü• SL: **{fmt(sig['sl'])}**\n"
        f"rng={fmt(sig['rng'])} body={fmt(sig['body'])}  RR‚âà{rr:.2f}"
    )

# =================== ENGINE ===================

async def engine_loop():
    last_log = 0.0
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                reset_day_if_needed()
                if state["signals_today"] >= MAX_SIGNALS_DAY:
                    if time.time() - last_log > 60:
                        await send("‚ö†Ô∏è –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.")
                        last_log = time.time()
                    await asyncio.sleep(POLL_SEC)
                    continue

                df = await get_df(session)
                if df.empty or len(df) < 20:
                    await asyncio.sleep(POLL_SEC)
                    continue

                i = len(df) - 1         # —Ç–µ–∫—É—â–∏–π –±–∞—Ä —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è
                cbar = i - 1            # –∑–∞–∫—Ä—ã—Ç—ã–π –±–∞—Ä
                if cbar <= state["last_bar_idx"]:
                    await asyncio.sleep(POLL_SEC)
                    continue

                o = float(df["Open"].iloc[cbar])
                h = float(df["High"].iloc[cbar])
                l = float(df["Low"].iloc[cbar])
                c = float(df["Close"].iloc[cbar])
                prev_closes = df["Close"].iloc[max(0, cbar-50):cbar].tolist()

                state["last_bar_idx"] = cbar
                state["last_close_ts"] = time.time()

                # –∞–Ω—Ç–∏-—Å–ø–∞–º –ø–æ –±–∞—Ä–∞–º
                if COOLDOWN_BARS > 0 and (cbar - state["last_signal_bar"] < COOLDOWN_BARS):
                    continue

                sig = candle_signal(o, h, l, c, prev_closes)
                if not sig:
                    # –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π "–∂–∏–≤"
                    if time.time() - last_log > LOG_EVERY_SEC:
                        await send(f"[ALIVE] feed={_prices_cache['src']} last={fmt(c)} OK")
                        last_log = time.time()
                    continue

                # –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ —Å–∞–π–¥ –Ω–∞ –ø–æ—á—Ç–∏ —Ç–æ–π –∂–µ —Ü–µ–Ω–µ
                if state["last_side"] == sig["side"] and state["last_price"] is not None:
                    if abs(sig["entry"] - state["last_price"]) <= 1.0:
                        continue

                # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
                await send(text_signal(sig))

                # –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state["last_signal_bar"] = cbar
                state["signals_today"]  += 1
                state["last_side"]       = sig["side"]
                state["last_price"]      = sig["entry"]

            except Exception as e:
                logging.error(f"engine error: {e}")
                await asyncio.sleep(1.0)
            await asyncio.sleep(POLL_SEC)

async def main():
    logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
    asyncio.create_task(engine_loop())
    await dp.start_polling(bot_main)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass
