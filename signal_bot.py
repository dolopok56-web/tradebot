#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import asyncio
import logging
from dataclasses import dataclass
from time import time

import pandas as pd
import yfinance as yf
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_polling

# ----------------------- –õ–û–ì–ò -----------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)
logger = logging.getLogger("xau-bot")

# ----------------------- –ö–û–ù–§–ò–ì -----------------------
# –¢–æ–∫–µ–Ω/—á–∞—Ç—ã: —á–∏—Ç–∞–µ–º –∏–∑ ENV, –Ω–æ –¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç—ã, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ —Å—Ä–∞–∑—É
MAIN_BOT_TOKEN = os.getenv("MAIN_BOT_TOKEN") or "7930269505:AAEBq25Gc4XLksdelqmAMfZnyRdyD_KUzSs"
TARGET_CHAT_ID = int(os.getenv("TARGET_CHAT_ID", "6784470762"))
OWNER_ID       = int(os.getenv("OWNER_ID",       "6784470762"))

# –†—ã–Ω–æ–∫
SYMBOL_YF   = "XAUUSD=X"   # –∑–æ–ª–æ—Ç–æ —Å–ø–æ—Ç –≤ Yahoo
INTERVAL    = "1m"         # –º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
POLL_SEC    = 0.3          # —Ç–∏–∫ —Ü–∏–∫–ª–∞
HIST_BARS   = 120          # —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç–Ω—ã—Ö –±–∞—Ä–æ–≤ –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å

# –§–∏–ª—å—Ç—Ä—ã/–æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª–∏
SINGLE_TRADE_MODE = True   # —Ç–æ–ª—å–∫–æ 1 —Å–¥–µ–ª–∫–∞ –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
TP_MIN_PIPS       = 4.0    # –º–∏–Ω–∏–º—É–º —Ü–µ–ª–∏
CAP_PIPS          = 30.0   # –º–∞–∫—Å–∏–º—É–º —Ü–µ–ª–∏ (–æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å)
MIN_RANGE_PIPS    = 3.0    # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–≤–µ—á–∏ (high-low)
MIN_BODY_PIPS     = 1.0    # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ

# –°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–ø—Ä–æ—Å—Ç–∞—è –∏ –æ—Ç–∑—ã–≤—á–∏–≤–∞—è)
BREAK_BODY_PCT    = 0.6    # –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–ª–æ (0..1)
PULLBACK_TRIGGER  = 2.0    # –º–∏–Ω. —Ä–∞–∑–º–µ—Ä –æ—Ç–∫–∞—Ç–∞ –≤ –ø–∏–ø—Å–∞—Ö, —á—Ç–æ–±—ã –≤–∑—è—Ç—å —Ä–µ—Ç–µ—Å—Ç

# ----------------------- –¢–ï–õ–ï–ì–†–ê–ú -----------------------
bot = Bot(MAIN_BOT_TOKEN, parse_mode="HTML")
dp  = Dispatcher(bot)

def pips(a: float, b: float) -> float:
    return abs(a - b)

@dataclass
class Trade:
    side: str         # "BUY"/"SELL"
    entry: float
    tp: float
    sl: float
    created_at: float

active_trade: Trade | None = None
last_close_ts: float = 0.0  # –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ —Å–≤–µ—á–∏

# ----------------------- –î–ê–ù–ù–´–ï -----------------------
async def load_history():
    """
    –ì—Ä—É–∑–∏–º –º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å Yahoo. –í–æ–∑–≤—Ä–∞—â–∞–µ–º pd.DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:
    ['open','high','low','close'] –∏ –∏–Ω–¥–µ–∫—Å–æ–º datetime (UTC).
    """
    loop = asyncio.get_event_loop()
    df = await loop.run_in_executor(None, lambda: yf.download(
        tickers=SYMBOL_YF,
        interval=INTERVAL,
        period="1d",
        progress=False,
        auto_adjust=False,
        threads=False
    ))
    if df is None or df.empty:
        raise RuntimeError("Empty data from Yahoo")
    df = df.rename(columns=str.lower)[["open", "high", "low", "close"]]
    return df

# ----------------------- –°–ò–ì–ù–ê–õ–´ -----------------------
def detect_signal(df: pd.DataFrame) -> tuple[str, float, float, float, str] | None:
    """
    –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞:
      1) Breakout: –±–æ–ª—å—à–∞—è —Å–≤–µ—á–∞-—Ç—Ä–µ–Ω–¥ (–ø–æ–ª–Ω–æ–µ —Ç–µ–ª–æ), –ø—Ä–æ–±–æ–π —Ç–µ–ª–∞ –≤ —Å—Ç–æ—Ä–æ–Ω—É
      2) Pullback: –æ—Ç–∫–∞—Ç >= PULLBACK_TRIGGER –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—É —Ç—Ä–µ–Ω–¥–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (side, entry, tp, sl, reason) –∏–ª–∏ None.
    """
    if len(df) < 5:
        return None

    last = df.iloc[-1]
    prev = df.iloc[-2]

    rng = last["high"] - last["low"]
    body = abs(last["close"] - last["open"])

    if rng < MIN_RANGE_PIPS or body < MIN_BODY_PIPS:
        return None

    body_ok = (body / rng) >= BREAK_BODY_PCT

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–ø–æ —Ç–µ–ª—É)
    direction_up   = last["close"] > last["open"]
    direction_down = last["close"] < last["open"]

    entry = float(last["close"])

    # --- Breakout ---
    if body_ok:
        if direction_up:
            # TP/SL –Ω–∞ CAP/2 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            tp = min(entry + max(TP_MIN_PIPS, body), entry + CAP_PIPS)
            sl = max(entry - max(MIN_BODY_PIPS, body/2), entry - CAP_PIPS)
            if (tp - entry) >= TP_MIN_PIPS:
                return ("BUY", entry, tp, sl, "BREAKOUT")
        if direction_down:
            tp = max(entry - max(TP_MIN_PIPS, body), entry - CAP_PIPS)
            sl = min(entry + max(MIN_BODY_PIPS, body/2), entry + CAP_PIPS)
            if (entry - tp) >= TP_MIN_PIPS:
                return ("SELL", entry, tp, sl, "BREAKOUT")

    # --- Pullback ---
    # –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤–Ω—É—Ç—Ä—å —Ç–µ–ª–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–∞ PULLBACK_TRIGGER
    prev_mid = (prev["open"] + prev["close"]) / 2
    if direction_up and (prev_mid - last["open"] >= PULLBACK_TRIGGER):
        tp = min(entry + max(TP_MIN_PIPS, rng), entry + CAP_PIPS)
        sl = max(entry - max(MIN_BODY_PIPS, rng/2), entry - CAP_PIPS)
        if (tp - entry) >= TP_MIN_PIPS:
            return ("BUY", entry, tp, sl, "PULLBACK-UP")

    if direction_down and (last["open"] - prev_mid >= PULLBACK_TRIGGER):
        tp = max(entry - max(TP_MIN_PIPS, rng), entry - CAP_PIPS)
        sl = min(entry + max(MIN_BODY_PIPS, rng/2), entry + CAP_PIPS)
        if (entry - tp) >= TP_MIN_PIPS:
            return ("SELL", entry, tp, sl, "PULLBACK-DOWN")

    return None

# ----------------------- –û–¢–ü–†–ê–í–ö–ò -----------------------
async def send_signal(side: str, entry: float, tp: float, sl: float, reason: str):
    global active_trade
    if SINGLE_TRADE_MODE and active_trade is not None:
        return
    active_trade = Trade(side=side, entry=entry, tp=tp, sl=sl, created_at=time())

    tp_p = pips(tp, entry)
    sl_p = pips(sl, entry)
    emoji = "üü¢ BUY" if side == "BUY" else "üî¥ SELL"
    text = (
        f"üî• {emoji} GOLD (XAU) | M1 ({reason})\n"
        f"Entry: <b>{entry:.2f}</b>\n"
        f"‚úÖ TP: <b>{tp:.2f}</b> (+{tp_p:.2f} pips)\n"
        f"üü• SL: <b>{sl:.2f}</b> (‚àí{sl_p:.2f} pips)\n"
    )
    await bot.send_message(TARGET_CHAT_ID, text)

async def close_deal(kind: str, level: float):
    global active_trade
    if not active_trade:
        return
    t = active_trade
    pnl = pips(level, t.entry)
    await bot.send_message(
        TARGET_CHAT_ID,
        f"‚úÖ DEAL CLOSED: <b>{kind}</b> at <b>{level:.2f}</b> "
        f"(+{pnl:.2f} pips)\nSide: {t.side}, Entry: {t.entry:.2f}"
    )
    active_trade = None

async def check_active_trade_hit(cur_price: float):
    if not active_trade:
        return
    t = active_trade
    if t.side == "BUY":
        if cur_price >= t.tp:
            await close_deal("TP", t.tp)
        elif cur_price <= t.sl:
            await close_deal("SL", t.sl)
    else:  # SELL
        if cur_price <= t.tp:
            await close_deal("TP", t.tp)
        elif cur_price >= t.sl:
            await close_deal("SL", t.sl)

# ----------------------- –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ -----------------------
async def engine_loop():
    global last_close_ts
    logger.info("Engine loop started")
    while True:
        try:
            df = await load_history()
            # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã—Ç—É—é —Å–≤–µ—á—É
            last_bar = df.iloc[-1]
            # –∏–Ω–¥–µ–∫—Å ‚Äî —ç—Ç–æ pandas.Timestamp
            ts = float(pd.Timestamp(last_bar.name).timestamp())

            close_price = float(last_bar["close"])

            # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é —Å–¥–µ–ª–∫—É
            await check_active_trade_hit(close_price)

            # —á—Ç–æ–±—ã –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ —Å–≤–µ—á–µ
            if ts > last_close_ts and (active_trade is None):
                sig = detect_signal(df)
                if sig:
                    side, entry, tp, sl, reason = sig
                    if pips(tp, entry) >= TP_MIN_PIPS:
                        await send_signal(side, entry, tp, sl, reason)
                last_close_ts = ts

        except Exception as e:
            logger.exception("Engine error: %s", e)

        await asyncio.sleep(POLL_SEC)

# ----------------------- –ö–û–ú–ê–ù–î–´ -----------------------
@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    await m.reply("–û–Ω–ª–∞–π–Ω. –†–µ–∂–∏–º: GOLD (XAU) M1. –ö–æ–º–∞–Ω–¥—ã: /status, /gold")

@dp.message_handler(commands=["status", "—Å—Ç–∞—Ç—É—Å"])
async def cmd_status(m: types.Message):
    t = active_trade
    if t:
        age = int(time() - t.created_at)
        msg = (f"mode: XAU M1 | open=YES side={t.side} "
               f"entry={t.entry:.2f} tp={t.tp:.2f} sl={t.sl:.2f} age={age}s")
    else:
        msg = "mode: XAU M1 | open=NO"
    await m.reply(f"<code>\n{msg}\n</code>")

@dp.message_handler(commands=["gold", "–∑–æ–ª–æ—Ç–æ"])
async def cmd_gold(m: types.Message):
    await m.reply("‚úÖ –†–µ–∂–∏–º —É–∂–µ: GOLD (XAU) M1.")

# ----------------------- MAIN -----------------------
async def main():
    # –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∏–∂–æ–∫ –∏ —Ç–µ–ª–µ–≥—Ä–∞–º
    loop_task = asyncio.create_task(engine_loop())
    try:
        await start_polling(dp, skip_updates=True)
    finally:
        loop_task.cancel()
        with contextlib.suppress(asyncio.CancelledError):
            await loop_task

if __name__ == "__main__":
    import contextlib
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass
