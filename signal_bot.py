# gold_bot_final.py
# –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –±–æ—Ç: XAU (Gold) M1, –±–µ–∑ —Å–ø–∞–º–∞.
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: aiogram, aiohttp, yfinance, pandas, numpy
# pip install aiogram aiohttp yfinance pandas numpy

import asyncio
import os
import time
from dataclasses import dataclass
from typing import Optional, Callable

import pandas as pd
import numpy as np
import yfinance as yf
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command

# ==========[ –ù–ê–°–¢–†–û–ô–ö–ò ]==========

# –¢–í–û–ò –î–ê–ù–ù–´–ï (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫ ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –∫–æ—Ä–æ–±–∫–∏)
MAIN_BOT_TOKEN = os.getenv("MAIN_BOT_TOKEN", "7930269505:AAEBq25Gc4XLksdelqmAMfZnyRdyD_KUzSs")
OWNER_ID = int(os.getenv("OWNER_ID", "6784470762"))
TARGET_CHAT_ID = int(os.getenv("TARGET_CHAT_ID", str(OWNER_ID)))  # –∫—É–¥–∞ –ª–µ—Ç—è—Ç —Å–∏–≥–Ω–∞–ª—ã
LOG_CHAT_ID = int(os.getenv("LOG_CHAT_ID", str(OWNER_ID)))        # –ª–æ–≥ (alive/—Ç–µ—Ö—Ç–µ–∫—Å—Ç)

# –†—ã–Ω–æ–∫/—Ñ–∏–¥
SYMBOL_NAME = "GOLD (XAU)"
YF_TICKER = os.getenv("YF_TICKER", "GC=F")   # –∑–æ–ª–æ—Ç–æ —Ñ—å—é—á; –º–æ–∂–Ω–æ "XAUUSD=X"
TIMEFRAME = "1m"                             # M1
POLL_SEC = 3                                 # –æ–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ ~3—Å
PER_BAR_MODE = True                          # –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–µ

# –£—Å–ª–æ–≤–∏—è —Å–≤–µ—á–∏
MIN_RANGE = 3.0      # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å–≤–µ—á–∏ (–≤ –ø—É–Ω–∫—Ç–∞—Ö —Ü–µ–Ω—ã)
MIN_BODY = 1.0       # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ —Å–≤–µ—á–∏ (–≤ –ø—É–Ω–∫—Ç–∞—Ö)
TP_MIN = 4.0         # –º–∏–Ω–∏–º—É–º –¢–ü (–≤ –ø—É–Ω–∫—Ç–∞—Ö)
CAP_TP = 30.0        # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¢–ü (—á—Ç–æ–± –Ω–µ —É–ª–µ—Ç–∞–ª–æ)
SL_BUFFER = 3.0      # –∑–∞–ø–∞—Å –∫ SL (–¥–ª—è SELL SL=entry+max(body,MIN_RANGE)+SL_BUFFER)
# –ê–Ω—Ç–∏-—Å–ø–∞–º:
EXCLUSIVE_MODE = True           # –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª
LOCK_SAME_BAR = True            # –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–æ—Ç –∂–µ –±–∞—Ä
MAX_TRADE_BARS = 6              # "—Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏" –∏–¥–µ–∏ (6 –±–∞—Ä–æ–≤ M1 ‚âà 6 –º–∏–Ω)
COOLDOWN_AFTER_CLOSE_SEC = 60   # –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ TP/SL/expire
ALIVE_TO_MAIN = False           # alive —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥, –Ω–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç

# ==========[ –°–ï–†–í–ò–° ]==========

def now_ts() -> int:
    return int(time.time())

async def aprint_log(bot: Bot, text: str):
    try:
        if ALIVE_TO_MAIN:
            await bot.send_message(TARGET_CHAT_ID, text)
        else:
            await bot.send_message(LOG_CHAT_ID, text)
    except Exception:
        pass

@dataclass
class TradeState:
    side: str          # "BUY" / "SELL"
    entry: float
    tp: float
    sl: float
    bar_ts: pd.Timestamp   # ts –±–∞—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–∫—Ä—ã—Ç —Å–∏–≥–Ω–∞–ª
    opened_ts: int

active: Optional[TradeState] = None
cooldown_until = 0
last_signal_bar_id: Optional[pd.Timestamp] = None

def price_hit(side: str, p: float, tp: float, sl: float) -> Optional[str]:
    if side == "BUY":
        if p >= tp: return "TP"
        if p <= sl: return "SL"
    else:
        if p <= tp: return "TP"
        if p >= sl: return "SL"
    return None

def bars_since(bar_ts: pd.Timestamp, last_bar_ts: pd.Timestamp) -> int:
    # —Å–∫–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –±–∞—Ä–æ–≤ –ø—Ä–æ—à–ª–æ –æ—Ç bar_ts –¥–æ last_bar_ts
    # –æ–±–∞ ‚Äî pandas Timestamp —Å –º–∏–Ω—É—Ç–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
    if bar_ts is None or last_bar_ts is None:
        return 0
    dif = (last_bar_ts - bar_ts) / pd.Timedelta(minutes=1)
    try:
        return int(dif)
    except Exception:
        return 0

def last_price_from_df(df: pd.DataFrame) -> float:
    return float(df["Close"].iloc[-1])

# ==========[ –î–ê–ù–ù–´–ï ]==========

async def fetch_bars() -> pd.DataFrame:
    """
    –ì—Ä—É–∑–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –º–∏–Ω—É—Ç M1. yfinance —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ ‚Äî –∑–∞–≤–µ—Ä–Ω—ë–º –≤ —Ç—Ä–µ–¥.
    """
    loop = asyncio.get_running_loop()
    def _load():
        return yf.Ticker(YF_TICKER).history(period="90m", interval=TIMEFRAME)

    df = await loop.run_in_executor(None, _load)
    if not isinstance(df, pd.DataFrame) or df.empty:
        raise RuntimeError("Empty data from yfinance")
    df = df[["Open", "High", "Low", "Close"]].copy()
    df = df.dropna()
    return df

def detect_signal(df: pd.DataFrame):
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ ATR:
    - –µ—Å–ª–∏ –∑–∞–∫—Ä—ã–ª–∞—Å—å –±–æ–ª—å—à–∞—è –∫—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞ (range>=MIN_RANGE & body>=MIN_BODY) ‚Üí SELL
    - –µ—Å–ª–∏ –∑–µ–ª—ë–Ω–∞—è —Å —Ç–µ–º–∏ –∂–µ —É—Å–ª–æ–≤–∏—è–º–∏ ‚Üí BUY
    """
    row = df.iloc[-1]  # –ø–æ—Å–ª–µ–¥–Ω–∏–π –ó–ê–ö–†–´–¢–´–ô –±–∞—Ä (–º—ã —Ä–∞–±–æ—Ç–∞–µ–º per-bar)
    o, h, l, c = float(row.Open), float(row.High), float(row.Low), float(row.Close)
    rng = h - l
    body = abs(c - o)
    if rng < MIN_RANGE or body < MIN_BODY:
        return None

    if c < o:  # –º–µ–¥–≤–µ–∂—å—è
        side = "SELL"
        entry = c
        tp = max(entry - max(TP_MIN, body), entry - TP_MIN)
        tp = max(tp, entry - CAP_TP)
        sl = entry + max(body, MIN_RANGE) + SL_BUFFER
    else:      # –±—ã—á—å—è
        side = "BUY"
        entry = c
        tp = min(entry + max(TP_MIN, body), entry + CAP_TP)
        sl = entry - max(body, MIN_RANGE) - SL_BUFFER

    # RR —á–∏—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
    rr = abs(tp - entry) / max(1e-6, abs(entry - sl))
    return {
        "side": side,
        "entry": entry,
        "tp": tp,
        "sl": sl,
        "rng": rng,
        "body": body,
        "rr": rr
    }

async def send_signal(bot: Bot, sig: dict):
    global active, last_signal_bar_id
    msg = (
        f"üî• {sig['side']} {SYMBOL_NAME} | M1\n"
        f"Entry: {sig['entry']:.2f}\n"
        f"‚úÖ TP: **{sig['tp']:.2f}**\n"
        f"üß± SL: **{sig['sl']:.2f}**\n"
        f"rng={sig['rng']:.2f} body={sig['body']:.2f}  RR‚âà{sig['rr']:.2f}"
    )
    await bot.send_message(TARGET_CHAT_ID, msg, parse_mode=ParseMode.MARKDOWN)
    active = TradeState(
        side=sig["side"], entry=sig["entry"], tp=sig["tp"], sl=sig["sl"],
        bar_ts=last_signal_bar_id, opened_ts=now_ts()
    )

async def on_tp_sl(bot: Bot, hit: str, price: float):
    global active, cooldown_until
    side = active.side
    await bot.send_message(
        TARGET_CHAT_ID,
        ("‚úÖ TP hit" if hit == "TP" else "üõë SL hit") + f" @ {price:.2f} ({side})"
    )
    active = None
    cooldown_until = now_ts() + COOLDOWN_AFTER_CLOSE_SEC

# ==========[ –¢–ï–õ–ï–ì–†–ê–ú ]==========

bot = Bot(token=MAIN_BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(m: types.Message):
    await m.answer("–ì–æ—Ç–æ–≤. –†–µ–∂–∏–º: GOLD M1. –û–¥–∏–Ω —Å–∏–≥–Ω–∞–ª –∑–∞ —Ä–∞–∑, –±–µ–∑ —Å–ø–∞–º–∞. –ö–æ–º–∞–Ω–¥–∞: /status")

@dp.message(Command("status"))
async def cmd_status(m: types.Message):
    global active, cooldown_until
    cool = max(0, cooldown_until - now_ts())
    act = (
        f"{active.side} entry={active.entry:.2f} tp={active.tp:.2f} sl={active.sl:.2f}"
        if active else "–Ω–µ—Ç"
    )
    await m.answer(
        f"<b>mode:</b> XAU M1\n"
        f"cooldown: {cool}s\n"
        f"active: {act}\n"
        f"min_range={MIN_RANGE} min_body={MIN_BODY} tp_min={TP_MIN} cap={CAP_TP}\n"
        f"per_bar={PER_BAR_MODE} poll={POLL_SEC}s"
    )

@dp.message(Command("cancel"))
async def cmd_cancel(m: types.Message):
    global active, cooldown_until
    active = None
    cooldown_until = now_ts() + 5
    await m.answer("–û–∫–µ–π, —Ç–µ–∫—É—â–∞—è –∏–¥–µ—è —Å–±—Ä–æ—à–µ–Ω–∞.")

# ==========[ –î–í–ò–ñ–û–ö ]==========

async def engine_loop():
    global last_signal_bar_id, cooldown_until, active

    await aprint_log(bot, "[engine] start")
    last_closed_index: Optional[pd.Timestamp] = None

    while True:
        try:
            df = await fetch_bars()

            # –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫—Ä—ã—Ç—ã–π –±–∞—Ä ‚Äî —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ df
            closed_ts = df.index[-1]

            # –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–¥–µ–∏
            if active:
                last_price = float(df["Close"].iloc[-1])
                hit = price_hit(active.side, last_price, active.tp, active.sl)
                if hit:
                    await on_tp_sl(bot, hit, last_price)
                else:
                    # –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∞—Ä–æ–≤
                    bars_passed = bars_since(active.bar_ts, closed_ts)
                    if bars_passed >= MAX_TRADE_BARS:
                        await aprint_log(bot, "Idea expired (no TP/SL). Unlock.")
                        active = None
                        cooldown_until = now_ts() + COOLDOWN_AFTER_CLOSE_SEC

            # –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
            # 1) –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏
            # 2) –Ω–µ—Ç –∫—É–ª–¥–∞—É–Ω–∞
            # 3) –Ω–æ–≤—ã–π –±–∞—Ä –∑–∞–∫—Ä—ã—Ç
            if (not active) and (now_ts() >= cooldown_until):
                new_bar = (last_closed_index is None) or (closed_ts != last_closed_index)
                if PER_BAR_MODE and new_bar:
                    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –±–∞—Ä
                    last_closed_index = closed_ts
                    last_signal_bar_id = closed_ts

                    sig = detect_signal(df)
                    if sig:
                        # –∞–Ω—Ç–∏–¥—É–±–ª–∏–∫–∞—Ç –≤ —Ç–æ–º –∂–µ –±–∞—Ä–µ
                        if LOCK_SAME_BAR and last_signal_bar_id == closed_ts:
                            # last_signal_bar_id —Å–µ–π—á–∞—Å –∫–∞–∫ —Ä–∞–∑ –æ–±–Ω–æ–≤–∏–ª–∏ –≤—ã—à–µ ‚Äî —Ç–∞–∫ —á—Ç–æ
                            # –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±—É–¥—É—â–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
                            pass
                        # –æ—Ç—Å—ã–ª–∫–∞
                        if EXCLUSIVE_MODE:
                            await send_signal(bot, sig)

            # alive –≤ –ª–æ–≥ —Ä–∞–∑ –≤ ~60—Å
            if int(time.time()) % 60 == 0:
                await aprint_log(bot, f"[alive] {SYMBOL_NAME} poll={POLL_SEC}s ok")

        except Exception as e:
            try:
                await aprint_log(bot, f"[engine] error: {e}")
            except Exception:
                pass

        await asyncio.sleep(POLL_SEC)

# ==========[ MAIN ]==========

async def main():
    asyncio.create_task(engine_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass
